The ``1-my_list`` module
======================
First import module:

      >>> MyList = __import__('1-my_list').MyList

use it:

    >>> l1 = MyList()
    >>> type(l1)
    <class '1-my_list.MyList'>

    >>> print(l1)
    []

This Class inherits from list

     >>> issubclass(MyList, list)
     True

This class only defines one extra function

     >>> 'print_sorted' in dir(MyList)
     True

     >>> l2 = [0, 1, 6, 3, 5]
     >>> l2.print_sorted()
     Traceback (most recent call last):
     AttributeError: 'list' object has no attribute 'print_sorted'

It is assumed all the elements of the list will be integers.

   >>> def test_i(tests=[]):
   ... for test in tests:
   ...       	try:
   ...				test.print_sorted()
   ...					except Exception as e:
   ...      				              	     print("[{}] {}".format(e.__class__.__name__, e))
   ...

   >>> tests = [MyList([1, "hola"]), MyList(["1", "2", "3"]), None, MyList([[11], [32]]), MyList([0, -4, 5.5])]
   >>> test_i(tests)
   [TypeError] unorderable types: str() < int()
   [ValueError] Unknown format code 'd' for object of type 'str'
   [AttributeError] 'NoneType' object has no attribute 'print_sorted'
   [TypeError] non-empty format string passed to object.__format__
   [ValueError] Unknown format code 'd' for object of type 'float'

``print_sorted`` prints the elements in sorted order, but does not change
the order of the elements in the list.

    >>> l1.print_sorted()
    []

    >>> l3 = MyList(l2)
    >>> print(l3)
    [0, 1, 6, 3, 5]

    >>> l3.print_sorted()
    [0, 1, 3, 5, 6]

    >>> print(l3)
    [0, 1, 6, 3, 5]

Works with negative numbers as well

      >>> l4 = MyList([-2513, -1285, 0, -3456, 1])
      >>> l4
      [-2513, -1285, 0, -3456, 1]

      >>> l4.print_sorted()
      [-3456, -2513, -1285, 0, 1]

      >>> l4
      [-2513, -1285, 0, -3456, 1]

